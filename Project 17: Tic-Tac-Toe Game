A simple implementation of a Tic-Tac-Toe game with a front end using HTML, CSS, and JavaScript, and a back end using Node.js with Express. This will allow two players to play the game in a web application.

##FRONT-END CODE:(HTML+CSS+JS)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: #f4f4f4;
        }
        h1 {
            margin-bottom: 20px;
        }
        .board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            gap: 5px;
        }
        .cell {
            width: 100px;
            height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2em;
            background-color: #fff;
            border: 2px solid #000;
            cursor: pointer;
        }
        .message {
            margin-top: 20px;
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <h1>Tic-Tac-Toe</h1>
    <div class="board" id="board"></div>
    <div class="message" id="message"></div>
    <button onclick="resetGame()">Restart Game</button>

    <script>
        const board = document.getElementById('board');
        const message = document.getElementById('message');
        let currentPlayer = 'X';
        let gameState = ['', '', '', '', '', '', '', '', ''];
        let gameActive = true;

        const winningConditions = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6],
        ];

        function createBoard() {
            for (let i = 0; i < 9; i++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.setAttribute('data-cell-index', i);
                cell.addEventListener('click', handleCellClick);
                board.appendChild(cell);
            }
        }

        function handleCellClick(event) {
            const clickedCell = event.target;
            const clickedCellIndex = clickedCell.getAttribute('data-cell-index');

            if (gameState[clickedCellIndex] !== '' || !gameActive) {
                return;
            }

            updateCell(clickededCell, clickedCellIndex);
            checkResult();
        }

        function updateCell(clickedCell, clickedCellIndex) {
            gameState[clickedCellIndex] = currentPlayer;
            clickedCell.innerHTML = currentPlayer;
        }

        function checkResult() {
            let roundWon = false;

            for (let i = 0; i < winningConditions.length; i++) {
                const [a, b, c] = winningConditions[i];
                if (gameState[a] === '' || gameState[b] === '' || gameState[c] === '') {
                    continue;
                }
                if (gameState[a] === gameState[b] && gameState[a] === gameState[c]) {
                    roundWon = true;
                    break;
                }
            }

            if (roundWon) {
                message.innerHTML = `Player ${currentPlayer} wins!`;
                gameActive = false;
                return;
            }

            if (!gameState.includes('')) {
                message.innerHTML = 'It\'s a draw!';
                gameActive = false;
                return;
            }

            currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        }

        function resetGame() {
            gameActive = true;
            currentPlayer = 'X';
            gameState = ['', '', '', '', '', '', '', '', ''];
            message.innerHTML = '';
            document.querySelectorAll('.cell').forEach(cell => {
                cell.innerHTML = '';
            });
        }

        createBoard();
    </script>
</body>
</html>










##BACK-END CODE:(Node.js+Express)

Install Dependencies: Make sure you have Node.js installed. Create a new directory, run (npm init -y), and install Express using:
npm install express

Create the Server: Save the following code in a file called (server.js).


const express = require('express');
const app = express();
const port = 3000;

app.use(express.static('public')); // Serve static files from 'public' directory

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});


Front End: Save the HTML code above as index.html in a directory called public.
Back End: Save the Node.js code in a file called server.js in the root directory.
Run the Server: Use the command:
node server.js
Access the Game: Open your web browser and go to http://localhost:3000.




Summary:
This implementation includes a simple Tic-Tac-Toe game where two players can take turns playing. The game checks for wins or draws and allows players to restart the game. You can expand this project further by adding features like score tracking, user authentication.
